index.html
<!doctype html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8">
    <meta content="IE=edge" http-equiv='X-UA-Compatible'/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>ANTT</title>

    <!-- BOOTSTRAP -->
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <!-- FONT -->
    <link rel="stylesheet" href="css/all.min.css">
    <!--PRINCIPAL-->
    <link rel="stylesheet" href="css/global.min.css">

    <!--OPENLAYERS E MAIN.CSS-->
    <link rel="stylesheet" href="node_modules/ol/ol.css">
    <link rel="stylesheet" href="main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css">

</head>

<body>

<a href="#main" title="Link para o corpo da página" class="sr-only">Pular para o conteúdo principal</a>

<!-- MODAL -->
<div id="loadModal">
    <div id="modal-container">
        <!-- MODAL DE CONFIRMAÇÃO -->
        <div class="modal fade" id="modal_confirm" tabindex="-1" role="dialog" aria-labelledby="modal_confirm-title" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <span class="modal-title" id="modal_confirm-title">Dinamic Title</span>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">Dinamic Description</div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-white" data-dismiss="modal">Não</button>
                        <button type="button" class="btn btn-blue confirm-action">Sim</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- MODAL DE TOUR -->
        <div class="modal fade modal-transparent" id="modal_tour" tabindex="-1" role="dialog" aria-labelledby="modal_tour-title" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div id="slide_tour" class="carousel slide" data-ride="carousel" data-interval="false">
                        <ol class="carousel-indicators">
                            <li class="carousel-control" class="active">
                                <a href="#slide_tour" role="button" data-slide="prev">
                                    <button class="btn btn-blue">Voltar</button>
                                </a>
                            </li>
                            <li data-target="#slide_tour" data-slide-to="1"></li>
                            <li data-target="#slide_tour" data-slide-to="2"></li>
                            <li data-target="#slide_tour" data-slide-to="3"></li>
                            <li data-target="#slide_tour" data-slide-to="4"></li>
                            <li data-target="#slide_tour" data-slide-to="5"></li>
                            <li data-target="#slide_tour" data-slide-to="6"></li>
                            <li data-target="#slide_tour" data-slide-to="7"></li>
                            <li class="carousel-control">
                                <a href="#slide_tour" role="button" data-slide="next">
                                    <button class="btn btn-blue">Próxima</button>
                                </a>
                            </li>
                        </ol>
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <img class="d-none d-lg-block w-100" src="img/tour-0.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-0-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-0-mobile.png" alt="intro tour">
                                <button class="btn btn-blue btn-tour">Iniciar Tour pelo sistema</button>
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-1.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-1-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-1-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-2.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-2-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-2-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-3.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-3-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-3-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-4.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-4-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-4-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-5.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-5-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-5-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-6.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-6-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-6-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-7.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-7-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-7-mobile.png" alt="intro tour">
                            </div>
                            <div class="carousel-item">
                                <img class="d-none d-lg-block w-100" src="img/tour-8.png" alt="intro tour">
                                <img class="d-none d-md-block d-lg-none w-100" src="img/tour-8-md.png" alt="intro tour">
                                <img class="d-md-none w-100" src="img/tour-8-mobile.png" alt="intro tour">
                                <button class="btn btn-blue btn-tour" data-dismiss="modal">Iniciar Sistema</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- NAV -->
<nav id="mainNav" class="sidenav-bar">
    <div id="nav-container" class="container-fluid">

        <div class="title-content">

            <!-- TITULO DO SISTEMA -->
            <h1>
                    <span>
                        <img src="img/logo-sistema.png" alt="logo do sistema">
                        <span>
                             <span>SIR</span>
                            <span class="small">Geo</span>
                        </span>
                    </span>
            </h1>
            <!-- VERSÃO DO SISTEMA
            <div id="version-block" class="version-block">
                <span id="version">v0.1</span>
            </div> -->

            <div class="dropdown d-md-none nav_notificacao">
                <button class="btn btn-transparent dropdown-toggle nav_notificacao" id="nav_notificacao" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="info header">
                        <span class="badge-content">
                            <i class="fas fa-bell"></i>
                            <span class="badge badge-light">4</span>
                        </span>
                </button>

                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="header_notificacao">
                    <a class="dropdown-item" href="#"><span>Action</span></a>
                    <a class="dropdown-item" href="#"><span>Another action</span></a>
                    <a class="dropdown-item" href="#"><span>Something else here</span></a>
                </div>
            </div>

            <!-- MENU HAMBURGER -->
            <i data-toggle="class" data-target="#navBarContent" class="fas fa-bars toggleMenu"></i>
        </div>

        <div id="navBarContent">

            <!-- INFO HEADER -->
            <div class='d-md-none info-header'>
                <div class="row">
                    <div class="col-auto"><i class="fas fa-user"></i></div>
                    <div class="col-auto">
                        <p class="mb-0">Bem vindo usuário, <i>Lorem ipsum dolor.</i></p>
                        <span class="small">Sexta-feira, 13 de agosto de 2018</span>
                    </div>
                    <div class="close-button">
                        <button class="btn btn-transparent" data-toggle="class" data-target="#navBarContent" aria-label="close button">X</button>
                    </div>
                </div>
            </div>

            <!-- MENU ITEMS -->
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <!-- <a class="nav-link" href="index.html">
                        <i class="fas fa-home"></i>
                        <span>Página Inicial</span>
                    </a> -->
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="fas fa-map"></i>
                        <span>Camadas</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul id="listaLayers" class="none navbar-nav">
                        <!-- Itens criados no arquivo main.js -->
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="fas fa-road"></i>
                        <span>Concessionárias</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul id="listaConcessionarias" class="none navbar-nav">
                        <!-- Itens criados no arquivo main.js -->
                    </ul>
                </li>

                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="bi bi-flag-fill"></i>
                        <span>Unidades da Federação</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul id="listaUnidadesFederacao" class="none navbar-nav">
                        <!-- Itens criados no arquivo main.js -->
                    </ul>
                </li>

                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="bi bi-signpost-2-fill"></i>
                        <span>Rodovias</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul id="listaRodovias" class="none navbar-nav">
                        <!-- Itens criados no arquivo main.js -->
                    </ul>
                </li>

                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="bi bi-arrow-down-up"></i>
                        <span>Sentido</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul id="listaSentido" class="none navbar-nav">
                        <!-- Itens criados no arquivo main.js -->
                    </ul>
                </li>




                <!--
                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="fas fa-map"></i>
                        <span>GeoJSON</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul id="listaLayersGeo" class="none navbar-nav">
                        // <- Itens criados no arquivo main.js
                    </ul>
                </li>
                -->
                <!--
                <li class="nav-item">
                    <a class="nav-link" data-toggle="collapse-next" href="#">
                        <i class="fas fa-user-tie"></i>
                        <span>Comissão</span>
                        <i class="fas fa-chevron-down ml-auto"></i>
                    </a>

                    <ul class="none navbar-nav">
                        <li>
                            <a class="nav-link" href="comissao_lista.html">Consulta Comissão</a>
                        </li>
                        <li>
                            <a class="nav-link" href="comissao_cadastrar.html">Cadastrar Comissão</a>
                        </li>
                    </ul>
                </li>
                -->
            </ul>

            <!--
            <ul class="navbar-nav mr-auto small">
                <li class="nav-item">
                    <a class="nav-link" href="#">
                        <i class="fas fa-align-center"></i>
                        <span>Para que serve o Sistema?</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" data-target="#modal_tour" data-toggle="modal">
                        <i class="fas fa-question-circle"></i>
                        <span>Faça um tour pelo sistema</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">
                        <i class="far fa-file-pdf"></i>
                        <span>Manual do sistema</span>
                    </a>
                </li>
            </ul>
            -->
            </ul>

            <!-- INFO FOOTER -->
            <div class="info-footer">
                <button class="btn btn-transparent" data-toggle="modal" data-target="#modal_confirm" data-title="Sair" data-desc="Tem certeza que deseja sair do Siconpar?">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Sair</span>
                </button>

                <div>
                    <img src="img/logo-sutec.png" alt="logo SUTEC">
                </div>
            </div>
        </div>
    </div>
</nav>

<!-- MAIN -->
<main id="main">
    <div id="map" class="main-container"></div>
</main>

<!-- FOOTER -->
<footer>
    <div id="footer-container" class="footer-container">
        <div class="row">
            <div class="col-lg-auto ml-auto">
                <img src="img/logo-antt.png" alt="logo ANTT">
            </div>
        </div>
    </div>
</footer>

<div id="layer-icon" class="layer-icon">
    <i class="bi bi-stack"></i>
</div>

<div id="measurement-icon" class="measurement-icon">
    <i class="bi bi-rulers"></i>
</div>

<div id="export-icon" class="export-icon">
    <i class="bi bi-filetype-pdf"></i>
</div>

<div id="layer-control" class="layer-control">
    <button id="close-btn" class="close-btn">x</button>
    <h4>Camadas</h4>
    <div>
        <h6>Mapa Base</h6>
        <div class="base-layer-option">
            <img id="satellite-layer" src="img/mapa-satelite.png" alt="Satélite" title="Satélite" class="base-layer-icon">
            <span>Satélite</span>
        </div>
        <div class="base-layer-option">
            <img id="hillshade-layer" src="img/mapa-topo.png" alt="Topográfico" title="Topográfico" class="base-layer-icon">
            <span>Topográfico</span>
        </div>
    </div>
    <div>
        <h6>Controle de Opacidade</h6>
        <input id="opacity-input" type="range" min="0" max="1" step="0.01" value="1">
        <span id="opacity-output">1</span>
    </div>
</div>

<div id="measurement-control" class="measurement-control">
    <button id="measurement-close-btn" class="close-btn">x</button>
    <h6>Medição</h6>
    <p>Para iniciar a medição, selecione o tipo de medição desejado, clique em "Iniciar Medição" e comece a desenhar no mapa,
        para finalizar a medição faça um duplo clique onde deseja finalizar e estarão prontas as suas medidas.
        Use "Parar Medição" para finalizar ou "Limpar Medições" para remover todas as medições.</p>
    <div>
        <label for="type">Tipo de Medição</label>
        <select id="type">
            <option value="LineString">Linha</option>
            <option value="Polygon">Polígono</option>
        </select>
    </div>
    <div>
        <label>
            <input type="checkbox" id="segments"> Mostrar Segmentos
        </label>
        <label>
            <input type="checkbox" id="clear"> Limpar Anterior
        </label>
    </div>
    <button id="start-measurement" class="btn">Iniciar Medição</button>
    <button id="stop-measurement" class="btn">Parar Medição</button>
    <button id="clear-measurements" class="btn">Limpar Medições</button>
</div>

<div id="export-control" class="export-control">
    <button id="export-close-btn" class="close-btn">x</button>
    <h6>Exportar para PDF</h6>
    <form>
        <label for="format">Tamanho da página</label>
        <select id="format">
            <option value="a0">A0 (lento)</option>
            <option value="a1">A1</option>
            <option value="a2">A2</option>
            <option value="a3">A3</option>
            <option value="a4" selected>A4</option>
            <option value="a5">A5 (rápido)</option>
        </select>
        <label for="resolution">Resolução</label>
        <select id="resolution">
            <option value="72">72 dpi (rápido)</option>
            <option value="150">150 dpi</option>
            <option value="300">300 dpi (lento)</option>
        </select>
    </form>
    <button id="export-pdf" class="btn">Exportar PDF</button>
</div>

<!--JQUERY-->
<script src="js/jquery-3.3.1.min.js"></script>
<script src="js/popper.min.js"></script>
<!-- BOOTSTRAP -->
<script src="js/bootstrap.min.js"></script>
<!-- GLOBAL -->
<script src="js/global.js"></script>
<!-- MODAL -->
<script src="js/apply_modal.js"></script>
<!-- TOGGLE EVENTS -->
<script src="js/apply_toggle.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
<!-- SCRIPTS RENDERIZAÇÃO MAPA -->
<script type="importmap">
    {
        "imports": {
            "rbush": "./node_modules/rbush/index.js",
            "quickselect": "./node_modules/quickselect/index.js",
            "color-space/lchuv.js": "./node_modules/color-space/lchuv.js",
            "color-space/rgb.js": "./node_modules/color-space/rgb.js",
            "color-space/xyz.js": "./node_modules/color-space/xyz.js",
            "color-rgba": "./node_modules/color-space/index.js"
        }
    }
</script>
<script type="module" src="main.js"></script>

</body>
</html>


main.css
#map {
  position: absolute;
  top: 0;
  bottom: 80px; /* ajustar para dar espaço para o footer */
  left: 160px; /* ajustar para dar espaço para a barra lateral */
  right: 0;
  width: auto;
}

.ol-coordinates {
  position: absolute;
  bottom: 90px; /* ajuste a posição */
  left: 100px; /* ajuste a posição */
  background-color: rgba(255, 255, 255, 0.8);
  padding: 0.5em;
  border: 1px solid #ccc;
  font-family: Arial, sans-serif;
  font-size: 12px;
  z-index: 1000; /* garante que esteja acima do mapa */
}

span.lista-item {
  font-size: small;
}

.sidenav-bar {
  height: 100%; /* tamanho da altura */
  width: 160px; /* ajuste da largura do sidebar */
  position: fixed; /* posição fixa do sidebar */
  z-index: 1; /* fica no topo */
  top: 0; /* fica no topo */
  left: 0;
  background-color: #111;
  overflow-x: hidden; /* desabilita o controle de rolagem lateral */
  padding-top: 20px;
  scrollbar-gutter: stable;
  scrollbar-color: lightgray white;
  scrollbar-width: thin;
}

.ol-popup {
  position: absolute;
  background-color: white;
  box-shadow: 0 1px 4px rgba(0,0,0,0.2);
  padding: 10px; /* Reduzido para ajustar a tabela */
  border-radius: 8px; /* Ajuste da borda */
  border: 1px solid #cccccc;
  min-width:  20vh; /* Largura mínima */
  max-width: 60vh; /* Largura máxima ajustável */
  max-height: 60vh; /* Altura máxima ajustável */
  overflow-y: auto; /* Barra de rolagem se o conteúdo exceder */
  cursor: move;
}

.ol-popup-content {
  max-height: 60vh;
  font-size: 12px; /* Tamanho da fonte reduzido */
}

.ol-popup-closer {
  text-decoration: none;
  position: absolute;
  top: 4px;
  right: 8px;
  color: #777;
}

.ol-popup-closer:after {
  content: 'x';
  font-size: 15px;
}

.ol-popup-closer:hover {
  color: black;
}

.popup-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 12px; /* Tamanho da fonte reduzido */
}

.popup-table th,
.popup-table td {
  padding: 4px; /* Reduzido para ajustar a tabela */
  border: 1px solid #dddddd;
  text-align: left;
}

.popup-table th {
  background-color: #f7f7f7;
}

@media (max-width: 768px) {
  .ol-popup {
    max-width: 90vw;
  }
}

.map {
  width: 100%;
  height: calc(100vh - 80px); /* ajuste para garantir espaço para o rodapé */
  position: relative; /* adicionado para contexto de posicionamento */
}

.layer-control, .measurement-control, .export-control {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #ffffff;
  padding: 10px 15px; /* Adjusted padding */
  border: 1px solid #ccc;
  border-radius: 5px;
  z-index: 1002; /* Garantir que esteja acima do mapa */
  display: none; /* Hidden by default */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  opacity: 0.8;
  max-width: 200px;
}

.layer-icon, .measurement-icon, .export-icon {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 40px;
  height: 40px;
  background: #ffffff;
  border: 1px solid #ccc;
  border-radius: 5px;
  z-index: 1001;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.measurement-icon {
  top: 60px; /* ajuste de posição para ícone medição */
}

.export-icon {
  top: 110px; /* ajuste de posição para topo ícone */
}

.layer-icon:hover, .measurement-icon:hover, .export-icon:hover {
  background: #f0f0f0;
}

.close-btn {
  position: absolute;
  top: 5px; /* ajuste de posição para topo */
  right: 5px; /* ajuste de posição para direita*/
  background: transparent;
  border: none;
  font-size: 12px;
  cursor: pointer;
  color: #aaa;
}

.close-btn:hover {
  color: #ff0505;
}

.layer-control h4, .layer-control h5, .measurement-control h4, .measurement-control h5, .export-control h4 {
  margin: 5px 0; /* Adjusted margin */
}

.layer-control label, .measurement-control label, .export-control label {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
}

.layer-control input[type="checkbox"], .measurement-control input[type="checkbox"] {
  margin-right: 10px;
}

.layer-control input[type="range"], .measurement-control select, .export-control select {
  width: calc(80% - 8px); /* ajuste de largura */
  margin-left: 10px; /* ajuste de margem */
}

.layer-control {
  font-size: 12px;
}

.base-layer-option {
  display: flex;
  align-items: center;
  cursor: pointer;
  margin-bottom: 10px;
}

.base-layer-icon {
  width: 50px;
  height: 50px;
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.base-layer-icon:hover {
  border-color: #007bff;
}

.base-layer-option span {
  font-size: 12px;
}

.btn {
  display: block;
  width: 100%;
  padding: 10px;
  margin-top: 10px;
  font-size: 14px;
  cursor: pointer;
  background-color: #007bff;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  text-align: center;
}

.btn:hover {
  background-color: #0056b3;
}

.measurement-control p {
  margin: 5px 0 10px; /* ajustar a margem */
  font-size: 14px;
  line-height: 1.4;
}

.version-block {
  background-color: #ffffff;
  padding: 10px;
  color: #1c48e6;
  font-size: 14px;
  text-align: center;
  border-radius: 5px;
  margin-top: 10px;
}

main {
  padding-bottom: 80px; /* ajuste para garantir espaço para o rodapé */
}

.footer-container {
  position: fixed;
  bottom: 0;
  width: calc(100% - 160px); /* ajustar para considerar a barra lateral */
  left: 160px; /* ajustar para dar espaço para a barra lateral */
  background-color: #ffffff;
  text-align: center;
  padding: 10px 0;
}

.ol-scale-line {
  bottom: 65px;
  top: auto;
  right: auto;
  left: 90px;
}

main.js
import Map from 'ol/Map.js';
import OSM from 'ol/source/OSM.js';
import TileWMS from 'ol/source/TileWMS.js';
import TileLayer from 'ol/layer/Tile.js';
import View from 'ol/View.js';
import { fromLonLat, toLonLat } from 'ol/proj.js';
import Overlay from 'ol/Overlay.js';
import VectorLayer from 'ol/layer/Vector.js';
import VectorSource from 'ol/source/Vector.js';
import XYZ from 'ol/source/XYZ.js';
import { Draw, Modify } from 'ol/interaction.js';
import { Circle as CircleStyle, Fill, Stroke, Style, Text } from 'ol/style.js';
import { getArea, getLength } from 'ol/sphere.js';
import { LineString, Polygon, Point } from 'ol/geom.js';
import { ScaleLine, defaults as defaultControls } from 'ol/control.js';

// carregamento do config.json
fetch('./config.json')
    .then(response => response.json())
    .then(configFile => {
      iniciarMapa(configFile);
    })
    .catch(error => {
      console.error('Erro ao carregar config.json:', error);
    });

function iniciarMapa(configFile) {
  const osmLayer = new TileLayer({
    title: 'Open Street Maps',
    source: new OSM(),
  });

  const esriWorldImageryLayer = new TileLayer({
    source: new XYZ({
      url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
    }),
    visible: false,
  });

  const esriWorldTopoLayer = new TileLayer({
    source: new XYZ({
      url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
    }),
    visible: false,
  });

  const source = new VectorSource();
  const vectorLayer = new VectorLayer({
    source: source,
    style: function (feature) {
      return styleFunction(feature, showSegments.checked);
    },
  });
  //adicionar a escala
  const scaleControl = new ScaleLine({
    units: 'metric',  // fixa a unidade em métrica
    bar: false,        // mostra a barra de escala
    steps: 2,         // número de divisões na barra
    text: true,       // mostra o valor da escala
    minWidth: 50, // largura mínima da barra
    maxWidth: 150,
    //className: 'ol-scale-line'  // classe CSS para a barra
  });

  const map = new Map({
    layers: [osmLayer, esriWorldImageryLayer, esriWorldTopoLayer, vectorLayer],
    target: 'map',
    view: new View({
      center: fromLonLat([-50.7805786132812, -13.9462928771973]),
      zoom: 4.8,
    }),
    controls: defaultControls().extend([scaleControl])  // Adiciona o controle de escala ao mapa
  });

  const layersSelecionados = {};
  const filtro = {
    concessionariasSelecionadas: {},
    unidadesFederacaoSelecionadas: {},
    rodoviasSelecionadas: {}
  };

  // adiciona as concessionárias
  for (const element in configFile['concessionarias']) {
    const nomeConcessionariaJson = element;
    const title = configFile['concessionarias'][element].title;

    let checkbox = document.createElement("input");
    checkbox.id = nomeConcessionariaJson;
    checkbox.type = "checkbox";

    let span = document.createElement("span");
    span.textContent = title;
    span.className = "lista-item";

    let a = document.createElement("a");
    a.className = "nav-link";
    a.href = "#";
    a.append(checkbox);
    a.append(span);

    let li = document.createElement("li");
    li.append(a);

    document.getElementById("listaConcessionarias").append(li);

    checkbox.onclick = function () {
      if (this.checked) {
        filtro['concessionariasSelecionadas'][nomeConcessionariaJson] = title;
      } else {
        delete filtro['concessionariasSelecionadas'][nomeConcessionariaJson];
      }
      exibirLayers(layersSelecionados, filtro);
    }
  }

  // adiciona as unidades da federação
  for (const element in configFile['rodovia_uf']) {
    const uf = element;
    const title = configFile['rodovia_uf'][element].title;

    let checkbox = document.createElement("input");
    checkbox.id = uf;
    checkbox.type = "checkbox";

    let span = document.createElement("span");
    span.textContent = title;
    span.className = "lista-item";

    let a = document.createElement("a");
    a.className = "nav-link";
    a.href = "#";
    a.append(checkbox);
    a.append(span);

    let li = document.createElement("li");
    li.append(a);

    document.getElementById("listaUnidadesFederacao").append(li);

    checkbox.onclick = function () {
      if (this.checked) {
        filtro['unidadesFederacaoSelecionadas'][uf] = title;
      } else {
        delete filtro['unidadesFederacaoSelecionadas'][uf];
      }
      exibirLayers(layersSelecionados, filtro);
    }
  }

  // adiciona as rodovias
  for (const element in configFile['rodovias']) {
    const rodovia = element;
    const title = configFile['rodovias'][element].title;

    let checkbox = document.createElement("input");
    checkbox.id = rodovia;
    checkbox.type = "checkbox";

    let span = document.createElement("span");
    span.textContent = title;
    span.className = "lista-item";

    let a = document.createElement("a");
    a.className = "nav-link";
    a.href = "#";
    a.append(checkbox);
    a.append(span);

    let li = document.createElement("li");
    li.append(a);

    document.getElementById("listaRodovias").append(li);

    checkbox.onclick = function () {
      if (this.checked) {
        filtro['rodoviasSelecionadas'][rodovia] = title;
      } else {
        delete filtro['rodoviasSelecionadas'][rodovia];
      }
      exibirLayers(layersSelecionados, filtro);
    }
  }

  // adiciona os sentidos
  for (const element in configFile['sentidos']) {
    const sentido = element;
    const title = configFile['sentidos'][element].title;

    let checkbox = document.createElement("input");
    checkbox.id = sentido;
    checkbox.type = "checkbox";

    let span = document.createElement("span");
    span.textContent = title;
    span.className = "lista-item";

    let a = document.createElement("a");
    a.className = "nav-link";
    a.href = "#";
    a.append(checkbox);
    a.append(span);

    let li = document.createElement("li");
    li.append(a);

    document.getElementById("listaSentido").append(li);

    checkbox.onclick = function () {
      if (this.checked) {
        filtro['sentidosSelecionados'][sentido] = title;
      } else {
        delete filtro['sentidosSelecionados'][sentido];
      }
      exibirLayers(layersSelecionados, filtro);
    }
  }


  // adiciona os layers
  for (const element in configFile['layers']) {
    const nomeLayerJson = element;
    const title = configFile['layers'][element].title;
    const url = configFile['layers'][element].url;
    const nomeLayerPostgis = configFile['layers'][element].nomeLayerPostgis;
    const permitirFiltroPorConcessionaria = configFile['layers'][element].permitirFiltroPorConcessionaria;

    const layer = new TileLayer({
      title: title,
      visible: false,
      source: new TileWMS({
        url: url,
        params: {
          'LAYERS': nomeLayerPostgis,
          'TILED': true
        },
        serverType: 'geoserver'
      })
    });
    map.addLayer(layer);

    let checkbox = document.createElement("input");
    checkbox.id = nomeLayerJson;
    checkbox.type = "checkbox";

    let span = document.createElement("span");
    span.textContent = title;
    span.className = "lista-item";

    let a = document.createElement("a");
    a.className = "nav-link";
    a.href = "#";
    a.append(checkbox);
    a.append(span);

    let li = document.createElement("li");
    li.append(a);

    document.getElementById("listaLayers").append(li);

    checkbox.onclick = function () {
      if (this.checked) {
        layersSelecionados[nomeLayerJson] = { layer, permitirFiltroPorConcessionaria };
      } else {
        delete layersSelecionados[nomeLayerJson];
      }
      exibirLayers(layersSelecionados, filtro);
    }
  }

  // elemento para o popup
  const popupElement = document.createElement('div');
  popupElement.className = 'ol-popup';
  const popupTitleElement = document.createElement('div');
  popupTitleElement.className = 'ol-popup-title';
  popupElement.appendChild(popupTitleElement);
  const popupContentElement = document.createElement('div');
  popupContentElement.className = 'ol-popup-content';
  popupElement.appendChild(popupContentElement);
  const closerElement = document.createElement('a');
  closerElement.href = '#';
  closerElement.className = 'ol-popup-closer';
  popupElement.appendChild(closerElement);

  // overlay para o popup
  const popupOverlay = new Overlay({
    element: popupElement,
    autoPan: false,
    autoPanAnimation: {
      duration: 250
    }
  });
  map.addOverlay(popupOverlay);

  // função para iniciar o arrasto da popup
  function startDragPopup(event) {
    event.preventDefault();

    // obter a posição inicial da popup em coordenadas do OpenLayers
    const overlayPosition = popupOverlay.getPosition();

    // converter as coordenadas do OpenLayers para pixels na tela
    const pixelPosition = map.getPixelFromCoordinate(overlayPosition);

    // calcular o deslocamento do cursor em relação ao topo e à esquerda da popup
    const offsetX = event.clientX - pixelPosition[0];
    const offsetY = event.clientY - pixelPosition[1];

    // função para mover a popup conforme o mouse é movido
    function movePopup(event) {
      event.preventDefault();

      // calcular a nova posição da popup em pixels
      const newLeft = event.clientX - offsetX;
      const newTop = event.clientY - offsetY;

      // converter a posição do pixel de volta para coordenadas do OpenLayers
      const newCoordinate = map.getCoordinateFromPixel([newLeft, newTop]);

      // atualizar a posição da popup
      popupOverlay.setPosition(newCoordinate);
    }

    // função para interromper o arraste da popup ao soltar o botão do mouse
    function stopDragPopup() {
      document.removeEventListener('mousemove', movePopup);
      document.removeEventListener('mouseup', stopDragPopup);
    }

    // adicionar ouvintes de evento para movimentar a popup
    document.addEventListener('mousemove', movePopup);
    document.addEventListener('mouseup', stopDragPopup);
  }

  // adicionar listener para iniciar o arrasto ao clicar na popup
  popupElement.addEventListener('mousedown', startDragPopup);

  // objeto de tradução de nomes de atributos
  const attributeTranslation = {
    nu_cnpj: 'CNPJ',
    no_fantasia: 'Concessão',
    no_rodovia: 'Rodovia',
    sg_uf: 'UF',
    km_m: 'Km',
    municipio: 'Municipio',
    tipo_pista: 'Tipo Pista',
    sentido: 'Sentido',
    tipo_ativo: 'Tipo do Ativo',
    latitude: "Latitude",
    longitude: 'Longitude'
  };

  // função para exibir o popup com informações formatadas em uma tabela
  function displayPopup(properties, coord) {
    const title = properties.rodovia ? ` ${properties.rodovia}` : '';
    popupTitleElement.innerHTML = `<h6>${title}</h6>`;

    let content = '<table class="popup-table">';

    // iterar sobre as propriedades e criar linhas da tabela
    for (const [key, value] of Object.entries(properties)) {
      const translatedKey = attributeTranslation[key] || key;
      let displayValue = value;

      if (typeof value === 'object' && value !== null) {
        displayValue = JSON.stringify(value);
      }

      content += `<tr><th>${translatedKey}</th><td>${displayValue}</td></tr>`;
    }

    content += '</table>';
    popupContentElement.innerHTML = content;

    // definir o tamanho fixo para o popup
    popupOverlay.setPosition(coord);
    popupElement.style.minWidth = '20vh'; // Largura mínima
    popupElement.style.maxWidth = '60vh'; // Largura máxima
    popupElement.style.maxHeight = '60vh'; // Altura máxima
    popupElement.style.minHeight = '10vh'; // Altura mínima
  }

  // adicionar interação de passagem do mouse para exibir a popup
  map.on('pointermove', function (event) {
    const pixel = map.getEventPixel(event.originalEvent);
    const coord = map.getCoordinateFromPixel(pixel);
    const viewResolution = map.getView().getResolution();

    // encontrar a camada correta que está visível
    let layerComInfoUrl = null;
    for (let key in layersSelecionados) {
      const { layer } = layersSelecionados[key];
      if (layer.getVisible() && layer.getSource() instanceof TileWMS) {
        layerComInfoUrl = layer;
        break;
      }
    }

    if (layerComInfoUrl) {
      const url = layerComInfoUrl.getSource().getFeatureInfoUrl(
          coord, viewResolution, 'EPSG:3857', {
            'INFO_FORMAT': 'application/json'
          }
      );

      if (url) {
        fetch(url)
            .then(response => response.json())
            .then(data => {
              if (data.features && data.features.length > 0) {
                const properties = data.features[0].properties;
                displayPopup(properties, coord);
              }
            })
            .catch(err => {
              console.error('Erro ao buscar informações da feature:', err);
              popupOverlay.setPosition(undefined);
            });
      } else {
        popupOverlay.setPosition(undefined);
      }
    } else {
      popupOverlay.setPosition(undefined);
    }
  });

  // fechar o popup ao clicar no botão de fechar
  closerElement.onclick = function () {
    popupOverlay.setPosition(undefined);
    closerElement.blur();
    return false;
  };

  // função para exibir os layers selecionados
  function exibirLayers(layersSelecionados, filtro) {
    const concessionariasSelecionadas = filtro['concessionariasSelecionadas'];
    const unidadesFederacaoSelecionadas = filtro['unidadesFederacaoSelecionadas'];
    const rodoviasSelecionadas = filtro['rodoviasSelecionados'];
    const sentidosSelecionados = filtro['sentidosSelecionados'];

    const cql_filter_concessionarias = Object.keys(concessionariasSelecionadas)
        .map(key => `concessionaria = '${concessionariasSelecionadas[key]}'`)
        .join(' OR ');

    const cql_filter_uf = Object.keys(unidadesFederacaoSelecionadas)
        .map(key => `uf = '${unidadesFederacaoSelecionadas[key]}'`)
        .join(' OR ');

    const cql_filter_rodovias = Object.keys(rodoviasSelecionadas)
        .map(key => `rodovia = '${rodoviasSelecionadas[key]}'`)
        .join(' OR ');

    const cql_filter_sentidos = Object.keys(sentidosSelecionados)
        .map(key => `sentido = '${sentidosSelecionados[key]}'`)
        .join(' OR ');

    const cql_filter = [cql_filter_concessionarias, cql_filter_uf, cql_filter_rodovias, cql_filter_sentidos]
        .filter(Boolean)
        .join(' AND ');

    // oculta todas as camadas que não são base
    map.getLayers().forEach(layer => {
      if (layer !== osmLayer && layer !== esriWorldImageryLayer && layer !== esriWorldTopoLayer && layer !== vectorLayer) {
        layer.setVisible(false);
      }
    });

    // exibe apenas as camadas selecionadas
    for (let key in layersSelecionados) {
      const { layer, permitirFiltroPorConcessionaria } = layersSelecionados[key];
      let params = layer.getSource().getParams();

      if ((permitirFiltroPorConcessionaria && (cql_filter_concessionarias || cql_filter_rodovias)) || cql_filter_uf || cql_filter_sentidos) {
        params['CQL_FILTER'] = cql_filter;
      } else {
        delete params['CQL_FILTER'];
      }

      layer.getSource().updateParams(params);
      layer.setVisible(true);
    }
  }

  // adicionar controle de coordenadas
  const coordenadasDiv = document.createElement('div');
  coordenadasDiv.className = 'ol-coordinates ol-unselectable ol-control';


  map.getTargetElement().appendChild(coordenadasDiv);

  // exibir coordenadas ao clicar no mapa
  map.on('click', function (evt) {
    const coordinate = toLonLat(evt.coordinate);
    const lon = coordinate[0].toFixed(6);
    const lat = coordinate[1].toFixed(6);
    coordenadasDiv.innerHTML = `Longitude: ${lon}, Latitude: ${lat}`;
  });

  // controle de visibilidade das camadas base
  const esriWorldImageryIcon = document.getElementById('satellite-layer');
  const esriWorldTopoIcon = document.getElementById('hillshade-layer');
  const opacityInput = document.getElementById('opacity-input');
  const opacityOutput = document.getElementById('opacity-output');

  function setBaseLayerVisibility(imageryVisible, topoVisible) {
    esriWorldImageryLayer.setVisible(imageryVisible);
    esriWorldTopoLayer.setVisible(topoVisible);
    osmLayer.setVisible(true);
  }

  esriWorldImageryIcon.addEventListener('click', function () {
    const isVisible = esriWorldImageryLayer.getVisible();
    setBaseLayerVisibility(!isVisible, false);
  });

  esriWorldTopoIcon.addEventListener('click', function () {
    const isVisible = esriWorldTopoLayer.getVisible();
    setBaseLayerVisibility(false, !isVisible);
  });

  opacityInput.addEventListener('input', function () {
    const value = parseFloat(this.value);
    opacityOutput.textContent = value.toFixed(2);
    esriWorldImageryLayer.setOpacity(value);
    esriWorldTopoLayer.setOpacity(value);
  });

  // funções para mostrar e esconder os menus
  const measurementIcon = document.getElementById('measurement-icon');
  const measurementControl = document.getElementById('measurement-control');
  const measurementCloseButton = document.getElementById('measurement-close-btn');
  const layerIcon = document.getElementById('layer-icon');
  const layerControl = document.getElementById('layer-control');
  const closeButton = document.getElementById('close-btn');
  const exportIcon = document.getElementById('export-icon');
  const exportControl = document.getElementById('export-control');
  const exportCloseButton = document.getElementById('export-close-btn');
  const exportButton = document.getElementById('export-pdf');

  function hideIcons() {
    measurementIcon.style.display = 'none';
    layerIcon.style.display = 'none';
    exportIcon.style.display = 'none';
  }

  function showIcons() {
    measurementIcon.style.display = 'flex';
    layerIcon.style.display = 'flex';
    exportIcon.style.display = 'flex';
  }

  measurementIcon.addEventListener('click', () => {
    measurementControl.style.display = measurementControl.style.display === 'block' ? 'none' : 'block';
    if (measurementControl.style.display === 'block') {
      hideIcons();
    } else {
      showIcons();
    }
  });

  measurementCloseButton.addEventListener('click', () => {
    measurementControl.style.display = 'none';
    showIcons();
  });

  layerIcon.addEventListener('click', () => {
    layerControl.style.display = layerControl.style.display === 'block' ? 'none' : 'block';
    if (layerControl.style.display === 'block') {
      hideIcons();
    } else {
      showIcons();
    }
  });

  closeButton.addEventListener('click', () => {
    layerControl.style.display = 'none';
    showIcons();
  });

  exportIcon.addEventListener('click', () => {
    exportControl.style.display = exportControl.style.display === 'block' ? 'none' : 'block';
    if (exportControl.style.display === 'block') {
      hideIcons();
    } else {
      showIcons();
    }
  });

  exportCloseButton.addEventListener('click', () => {
    exportControl.style.display = 'none';
    showIcons();
  });

  // inicialização da interação de medição
  const typeSelect = document.getElementById('type');
  const showSegments = document.getElementById('segments');
  const clearPrevious = document.getElementById('clear');
  const startMeasurementButton = document.getElementById('start-measurement');
  const stopMeasurementButton = document.getElementById('stop-measurement');
  const clearMeasurementsButton = document.getElementById('clear-measurements');

  const style = new Style({
    fill: new Fill({
      color: 'rgba(255, 255, 255, 0.2)',
    }),
    stroke: new Stroke({
      color: 'rgba(0, 0, 0, 0.5)',
      lineDash: [10, 10],
      width: 2,
    }),
    image: new CircleStyle({
      radius: 5,
      stroke: new Stroke({
        color: 'rgba(0, 0, 0, 0.7)',
      }),
      fill: new Fill({
        color: 'rgba(255, 255, 255, 0.2)',
      }),
    }),
  });

  const labelStyle = new Style({
    text: new Text({
      font: '14px Calibri,sans-serif',
      fill: new Fill({
        color: 'rgba(255, 255, 255, 1)',
      }),
      backgroundFill: new Fill({
        color: 'rgba(0, 0, 0, 0.7)',
      }),
      padding: [3, 3, 3, 3],
      textBaseline: 'bottom',
      offsetY: -15,
    }),
  });

  const modify = new Modify({ source: source, style: style });
  map.addInteraction(modify);

  let draw;

  function formatLength(line) {
    const length = getLength(line);
    let output;
    if (length > 100) {
      output = (Math.round(length / 1000 * 100) / 100) + ' km';
    } else {
      output = (Math.round(length * 100) / 100) + ' m';
    }
    return output;
  }

  function formatArea(polygon) {
    const area = getArea(polygon);
    let output;
    if (area > 10000) {
      output = (Math.round(area / 1000000 * 100) / 100) + ' km²';
    } else {
      output = (Math.round(area * 100) / 100) + ' m²';
    }
    return output;
  }

  function styleFunction(feature, segments) {
    const styles = [style];
    const geometry = feature.getGeometry();
    let point, label, line;
    if (geometry.getType() === 'Polygon') {
      point = geometry.getInteriorPoint();
      label = formatArea(geometry);
      line = new LineString(geometry.getCoordinates()[0]);
    } else if (geometry.getType() === 'LineString') {
      point = new Point(geometry.getLastCoordinate());
      label = formatLength(geometry);
      line = geometry;
    }
    if (segments && line) {
      let count = 0;
      line.forEachSegment(function (a, b) {
        const segment = new LineString([a, b]);
        const label = formatLength(segment);
        const segmentPoint = new Point(segment.getCoordinateAt(0.5));
        styles.push(new Style({
          geometry: segmentPoint,
          text: new Text({
            text: label,
            font: '12px Calibri,sans-serif',
            fill: new Fill({
              color: 'rgba(255, 255, 255, 1)',
            }),
            backgroundFill: new Fill({
              color: 'rgba(0, 0, 0, 0.4)',
            }),
            padding: [2, 2, 2, 2],
            textBaseline: 'bottom',
            offsetY: -12,
          }),
        }));
        count++;
      });
    }
    if (label) {
      labelStyle.setGeometry(point);
      labelStyle.getText().setText(label);
      styles.push(labelStyle);
    }
    return styles;
  }

  function addInteraction() {
    const drawType = typeSelect.value;
    draw = new Draw({
      source: source,
      type: drawType,
      style: function (feature) {
        return styleFunction(feature, showSegments.checked);
      },
    });
    draw.on('drawstart', function () {
      if (clearPrevious.checked) {
        source.clear();
      }
      modify.setActive(false);
    });
    draw.on('drawend', function () {
      modify.setActive(true);
    });
    map.addInteraction(draw);
  }

  function removeInteraction() {
    if (draw) {
      map.removeInteraction(draw);
      draw = null;
    }
  }

  startMeasurementButton.addEventListener('click', function () {
    removeInteraction();
    addInteraction();
  });

  stopMeasurementButton.addEventListener('click', function () {
    removeInteraction();
  });

  clearMeasurementsButton.addEventListener('click', function () {
    source.clear();
  });

  typeSelect.onchange = function () {
    removeInteraction();
    addInteraction();
  };

  showSegments.onchange = function () {
    vectorLayer.changed();
  };

  // função de exportação para PDF
  const dims = {
    a0: [1189, 841],
    a1: [841, 594],
    a2: [594, 420],
    a3: [420, 297],
    a4: [297, 210],
    a5: [210, 148],
  };

  exportButton.addEventListener(
      'click',
      function () {
        exportButton.disabled = true;
        document.body.style.cursor = 'progress';

        const format = document.getElementById('format').value;
        const resolution = document.getElementById('resolution').value;
        const dim = dims[format];
        const width = Math.round((dim[0] * resolution) / 25.4);
        const height = Math.round((dim[1] * resolution) / 25.4);
        const size = map.getSize();
        const viewResolution = map.getView().getResolution();

        map.once('rendercomplete', function () {
          const mapCanvas = document.createElement('canvas');
          mapCanvas.width = width;
          mapCanvas.height = height;
          const mapContext = mapCanvas.getContext('2d');
          Array.prototype.forEach.call(
              document.querySelectorAll('.ol-layer canvas'),
              function (canvas) {
                if (canvas.width > 0) {
                  const opacity = canvas.parentNode.style.opacity;
                  mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);
                  const transform = canvas.style.transform;
                  // Get the transform parameters from the style's transform matrix
                  const matrix = transform
                      .match(/^matrix\(([^\(]*)\)$/)[1]
                      .split(',')
                      .map(Number);
                  // Apply the transform to the export map context
                  CanvasRenderingContext2D.prototype.setTransform.apply(
                      mapContext,
                      matrix,
                  );
                  mapContext.drawImage(canvas, 0, 0);
                }
              },
          );
          mapContext.globalAlpha = 1;
          mapContext.setTransform(1, 0, 0, 1, 0, 0);
          const pdf = new jspdf.jsPDF('landscape', undefined, format);
          pdf.addImage(
              mapCanvas.toDataURL('image/jpeg'),
              'JPEG',
              0,
              0,
              dim[0],
              dim[1],
          );
          pdf.save('map.pdf');
          // reseta o tamanho do mapa
          map.setSize(size);
          map.getView().setResolution(viewResolution);
          exportButton.disabled = false;
          document.body.style.cursor = 'auto';
        });

        // define o tamanho da impressão
        const printSize = [width, height];
        map.setSize(printSize);
        const scaling = Math.min(width / size[0], height / size[1]);
        map.getView().setResolution(viewResolution / scaling);
      },
      false,
  );
}

config.json

{
    "concessionarias" : {
        "cApFernaoDias": {
            "title": "AUTOPISTA FERNÃO DIAS"
        },
        "cApFluminense": {
            "title": "AUTOPISTA FLUMINENSE"
        },
        "cApLitoralSul": {
            "title": "AUTOPISTA LITORAL SUL"
        },
        "cApPlanaltoSul": {
            "title": "AUTOPISTA PLANALTO SUL"
        },
        "cApRegisBittencourt": {
            "title": "AUTOPISTA REGIS BITTENCOURT"
        },
        "cConcebra": {
            "title": "CONCEBRA"
        },
        "cConcer": {
            "title": "CONCER"
        },
        "cViaBrasil": {
            "title": "CONCESSIONÁRIA VIA BRASIL BR-163"
        },
        "cCro": {
            "title": "CRO"
        },
        "cEco050": {
            "title": "ECO050"
        },
        "cEco101": {
            "title": "ECO101 CONCESSIONARIA DE RODOVIAS S/A"
        },
        "cEcoponte": {
            "title": "ECOPONTE"
        },
        "cEcoriominas": {
            "title": "ECORIOMINAS"
        },
        "cEcosul": {
            "title": "ECOSUL"
        },
        "cEcoviasDoAraguaia": {
            "title": "ECOVIAS DO ARAGUAIA"
        },
        "cEcoviasDoCerrado": {
            "title": "ECOVIAS DO CERRADO"
        },
        "cSistemaRodRioSP": {
            "title": "HOLDING DO SISTEMA RODOVIARIO RIO - SAO PAULO S.A."
        },
        "cMsvia": {
            "title": "MSVIA"
        },
        "cRodoviaDoAco": {
            "title": "RODOVIA DO AÇO"
        },
        "cTransbrasiliana": {
            "title": "TRANSBRASILIANA"
        },
        "cVia040": {
            "title": "VIA 040"
        },
        "cViaBahia": {
            "title": "VIA BAHIA"
        },
        "cViaCosteira": {
            "title": "VIA COSTEIRA"
        },
        "cViaSul": {
            "title": "VIA SUL"
        }
    },
    "layers": {
        "sedesMunicipais": {
            "title": "Sedes Municipais",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:SEDES_MUNICIPAIS",
            "permitirFiltroPorConcessionaria": false
        },
        "municipios": {
            "title": "Municípios",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:MUNICIPIOS",
            "permitirFiltroPorConcessionaria": false
        },
        "regioes": {
            "title": "Regiões",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:REGIOES",
            "permitirFiltroPorConcessionaria": false
        },
        "dadosdaedificacaooperacional": {
            "title": "Edificação Operacional",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "\tteste:db_geo_dados_da_edificacao_operacional",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdapracasdePedagio": {
            "title": "Praças de Pedágio",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_das_pracas_de_pedagio",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdadeteccaoAltura": {
            "title": "Detecção e Estação Meteorológica",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_deteccao_altura",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdaSAT": {
            "title": "SAT",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_equipamentos_sensoriamento_de_trafego",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdaequipamentoPMVS": {
            "title": "Painel de Mensagem Variavel (PMV)",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_pmvs",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdaPRFS": {
            "title": "Posto da PRF",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_postos_prfs",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdoPPVS": {
            "title": "Posto de Pesagem Veicular (PPV)",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_ppvs",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosKmMarginal": {
            "title": "Dados do KM Marginal",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_quilometro_marginal",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosKmPrincipal": {
            "title": "Dados do KM Principal",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_quilometro_principal",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdosRadares": {
            "title": "Radar",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:dados_dos_radares",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdafibraotica": {
            "title": "Fibra Ótica",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_da_fibra_otic",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdailuminacao": {
            "title": "Dados da Iluminação",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_da_iluminacao",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdoTracado": {
            "title": "Traçado",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:dados_do_tracado",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdoPerfildoTerreno": {
            "title": "Perfil do Terreno",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:dados_perfil_do_terreno",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdosTipodePavimento": {
            "title": "Tipo de Pavimento",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:dados_tipo_do_pavimento",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdosTipodeFaixa": {
            "title": "Tipo de Faixa",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:dados_tipo_faixa",
            "permitirFiltroPorConcessionaria": true
        },
        "dadosdoUsodoSolo": {
            "title": "Uso do Solo",
            "url": "http://10.90.2.84:8080/geoserver/bdgeo_postgis/wms",
            "nomeLayerPostgis": "bdgeo_postgis:dados_uso_do_solo",
            "permitirFiltroPorConcessionaria": true
        },
        "tracadoConcessoes": {
            "title": "Traçado Concessões",
            "url": "",
            "nomeLayerPostgis": "bdgeo_postgis:tracado_antt_rodovias_concedidas",
            "permitirFiltroPorConcessionaria": true
        },
        "testeCFTV": {
            "title": "CFTV",
            "url": "http://192.168.56.102:8070/geoserver/teste/wms",
            "nomeLayerPostgis": "teste:db_geo_dados_dos_cftvs",
            "permitirFiltroPorConcessionaria": true
        }

    },
    "rodovia_uf" : {
        "ACRE" : {"title": "AC"},
        "ALAGOAS" : {"title": "AL"},
        "AMAPA" : {"title": "AP"},
        "AMAZONAS" : {"title": "AM"},
        "BAHIA" : {"title": "BA"},
        "CEARA" : {"title": "CE"},
        "DISTRITO FEDERAL" : {"title": "DF"},
        "ESPIRITO SANTO" : {"title": "ES"},
        "GOIAS" : {"title": "GO"},
        "MARANHAO" : {"title": "MA"},
        "MATO GROSSO" : {"title": "MT"},
        "MATO GROSSO DO SUL" : {"title": "MS"},
        "MINAS GERAIS" : {"title": "MG"},
        "PARA" : {"title": "PA"},
        "PARAIBA" : {"title": "PB"},
        "PARANA" : {"title": "PR"},
        "PERNAMBUCO" : {"title": "PE"},
        "PIAUI" : {"title": "PI"},
        "RIO DE JANEIRO" : {"title": "RJ"},
        "RIO GRANDE DO NORTE" : {"title": "RN"},
        "RIO GRANDE DO SUL" : {"title": "RS"},
        "RONDONIA" : {"title": "RO"},
        "RORAIMA" : {"title": "RR"},
        "SANTA CATARINA" : {"title": "SC"},
        "SAO PAULO" : {"title": "SP"},
        "SERGIPE" : {"title": "SE"},
        "TOCANTINS" : {"title": "TO"}

    },
    "rodovias" : {
        "BR-101": { "title": "BR-101" },
        "BR-116": { "title": "BR-116" },
        "BR-392": { "title": "BR-392" },
        "BR-163": { "title": "BR-163" },
        "BR-393": { "title": "BR-393" },
        "BR-381": { "title": "BR-381" },
        "BR-153": { "title": "BR-153" },
        "BR-262": { "title": "BR-262" },
        "BR-324": { "title": "BR-324" }
    },
    "sentidos" : {
        "Crescente" : {"title": "Crescente"},
        "Decrescente" : {"title": "Decrescente"}
    }
}